const { zokou } = require("../framework/zokou");

let antiStickerActive = false; // State of the anti-sticker feature

zokou({
  nomCom: "antisticker",
  categorie: "General",
  reaction: "🚫"
}, async (origineMessage, zk, commandeOptions) => {
  const { ms, arg } = commandeOptions;

  try {
    // Handle command arguments for toggling anti-sticker
    if (arg.length > 0) {
      const action = arg[0].toLowerCase();
      if (action === "on") {
        antiStickerActive = true;
        await zk.sendMessage(origineMessage.key.remoteJid, {
          text: "✅ Anti-sticker is now *active*!",
        });
        return;
      } else if (action === "off") {
        antiStickerActive = false;
        await zk.sendMessage(origineMessage.key.remoteJid, {
          text: "❌ Anti-sticker is now *deactivated*!",
        });
        return;
      }
    }

    // Check if anti-sticker is active
    if (!antiStickerActive) return;

    // Detect sticker messages
    if (ms.message && ms.message.stickerMessage) {
      console.log("Sticker detected!"); // Debug log for sticker detection

      // Delete the sticker message
      await zk.deleteMessage(origineMessage.key.remoteJid, {
        id: origineMessage.key.id,
        remoteJid: origineMessage.key.remoteJid,
        fromMe: false, // Ensure it's not the bot's message
      });

      // Optionally, send a warning message
      await zk.sendMessage(origineMessage.key.remoteJid, {
        text: "🚫 Stickers are not allowed in this chat!",
        mentions: [origineMessage.key.participant],
      });
    }
  } catch (error) {
    console.error("Error in anti-sticker script:", error);
    await zk.sendMessage(origineMessage.key.remoteJid, {
      text: "❌ An error occurred while processing the anti-sticker command.",
    });
  }
});